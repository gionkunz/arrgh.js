(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var Arrgh = require("./arrgh");
var ArrghUtil = require("./arrgh-util");

if (window) {
  window.Arrgh = Arrgh;
  window.Arrgh.Util = ArrghUtil;
}

},{"./arrgh":3,"./arrgh-util":2}],2:[function(require,module,exports){
"use strict";

exports.through = through;
exports.xor = xor;
exports.toArray = toArray;
exports.times = times;
exports.extend = extend;
exports.filterBy = filterBy;
exports.circularIndex = circularIndex;
function through(r) {
  return function (v) {
    return r || v;
  };
}

function xor(a, b) {
  return a ? !b : b;
}

function toArray(list) {
  return Array.prototype.slice.call(list);
}

function times(n) {
  return Array.apply(null, new Array(n));
}

function extend(target) {
  target = target || {};

  var sources = Array.prototype.slice.call(arguments, 1);
  sources.forEach(function (source) {
    for (var prop in source) {
      if (typeof source[prop] === "object" && !(source[prop] instanceof Array)) {
        target[prop] = extend.extend(target[prop], source[prop]);
      } else {
        target[prop] = source[prop];
      }
    }
  });

  return target;
}

function filterBy(key, value) {
  return function (elem) {
    return elem[key] === value;
  };
}

function circularIndex(length, index) {
  return index < 0 ? (length + index % length) % length : index % length;
}
Object.defineProperty(exports, "__esModule", {
  value: true
});

},{}],3:[function(require,module,exports){
"use strict";

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

module.exports = Arrgh;
var ArrghUtil = _interopRequireWildcard(require("./arrgh-util"));

function Arrgh(args, countOrNames) {
  args = ArrghUtil.toArray(args);

  if (typeof countOrNames === "number") {
    countOrNames = ArrghUtil.times(countOrNames).map(function (e, index) {
      return index;
    });
  }

  var arrgs = countOrNames.map(function (name, index) {
    return {
      index: index,
      name: name
    };
  });

  var assignFactory = function (ctx) {
    return function (indexOrKey, cb) {
      var filterKey = typeof indexOrKey === "number" ? "index" : "name";
      var arrg = arrgs.filter(ArrghUtil.filterBy(filterKey, indexOrKey))[0];

      if (!arrg) {
        throw new Error("Arrgument with " + filterKey + " " + indexOrKey + " not found in arrgument list " + JSON.stringify(arrgs));
      }

      arrg.value = cb(ctx.arg, ctx);

      return api;
    };
  };

  var throwFactory = function () {
    return function (error) {
      throw new Error(error);
    };
  };

  var thenFactory = function (ctx) {
    return function (cb) {
      cb(ctx);
    };
  };

  var isTypeFactory = function (ctx, negate) {
    return function (type) {
      var shouldTrigger = ArrghUtil.xor(negate, typeof ctx.arg === type);

      return {
        assign: shouldTrigger ? assignFactory(ctx) : ArrghUtil.through(api),
        "throw": shouldTrigger ? throwFactory(ctx) : ArrghUtil.through(api),
        then: shouldTrigger ? thenFactory(ctx) : ArrghUtil.through(api)
      };
    };
  };

  var checkFactory = function (ctx) {
    return function (cb) {
      var checkResult = cb(ctx.arg, ctx);

      return {
        assign: checkResult ? assignFactory(ctx) : ArrghUtil.through(api),
        "throw": checkResult ? throwFactory(ctx) : ArrghUtil.through(api),
        then: checkResult ? thenFactory(ctx) : ArrghUtil.through(api)
      };
    };
  };

  var api = {
    arg: function (index) {
      index = ArrghUtil.circularIndex(args.length, index);

      var ctx = {
        arg: args[index],
        index: index
      };

      return {
        is: isTypeFactory(ctx),
        isNot: isTypeFactory(ctx, true),
        check: checkFactory(ctx)
      };
    },
    varArg: function (startIndex, endIndex) {
      startIndex = ArrghUtil.circularIndex(args.length, startIndex);
      endIndex = endIndex || args.length;

      var ctx = {
        startIndex: startIndex,
        endIndex: endIndex,
        arg: args.slice().splice(startIndex, endIndex)
      };

      return {
        assign: assignFactory(ctx),
        then: thenFactory(ctx)
      };
    },
    get: function () {
      return arrgs.reduce(function (result, arrg) {
        result[arrg.name] = arrg.value || args[arrg.index];
        return result;
      }, {});
    }
  };

  return api;
}

},{"./arrgh-util":2}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
